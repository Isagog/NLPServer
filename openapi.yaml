openapi: "3.0.2"
info:
  description: "This is an NLP services server that analyzes a text using the library [KotlinNLP](https://github.com/KotlinNLP)."
  version: "1.0.0"
  title: "NLP Services"
  contact:
    email: "info@kotlinnlp.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
  description: "Visit the full KotlinNLP library"
  url: "https://github.com/KotlinNLP"
servers:
  - url: "http://localhost"
    variables:
      port:
        default: "3000"
      basePath:
        default: "/"
tags:
  - name: "NLPService"
    description: "Services for the analysis of texts written in natural language"
    externalDocs:
      description: "Find out more"
      url: "https://github.com/KotlinNLP/NLPServer"
paths:
  /analyze:
    post:
      tags:
        - "NLPService"
      summary: "Get the complete analysis of a text"
      operationId: "analyzeText"
      parameters:
        - name: "distribution"
          in: "query"
          description: "whether to return the score distributions of various analysis elements"
          allowEmptyValue: true
          schema:
            type: "boolean"
            default: false
        - name: "pretty"
          in: "query"
          description: "whether to indent the returned JSON string, for a major readability"
          allowEmptyValue: true
          schema:
            type: "boolean"
            default: false
      requestBody:
        description: "The text to analyze"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnalyzeInput"
      responses:
        "200":
          description: "text successfully analyzed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyzeResponse"
        400:
          description: "Invalid input"
components:
  schemas:
    AnalyzeInput:
      type: "object"
      required:
        - "text"
      properties:
        text:
          type: "string"
    AnalyzeResponse:
      type: "object"
      required:
        - "linguisticAnalysis"
        - "categories"
        - "locations"
        - "dateTimes"
        - "entities"
      properties:
        linguisticAnalysis:
          $ref: "#/components/schemas/LinguisticAnalysis"
        categories:
          type: "object"
          properties:
            iptc:
              $ref: "#/components/schemas/Category"
        locations:
          type: "array"
          items:
            $ref: "#/components/schemas/Location"
        dateTimes:
          type: "array"
          items:
            $ref: "#/components/schemas/DateTime"
        entities:
          type: "array"
          items:
            $ref: "#/components/schemas/Entity"
    LinguisticAnalysis:
      type: "object"
      description: "the linguistic analysis of the text, including syntactic, morphological and semantic information"
      required:
        - "sentences"
        - "language"
      properties:
        sentences:
          type: "array"
          items:
            $ref: "#/components/schemas/LinguisticSentence"
        language:
          $ref: "#/components/schemas/Language"
    LinguisticSentence:
      type: "object"
      description: "the linguistic analysis of a sentence, including syntactic, morphological and semantic information"
      required:
        - "id"
        - "score"
        - "position"
        - "tokens"
      properties:
        id:
          type: "number"
          format: "int32"
          example: 0
        score:
          $ref: "#/components/schemas/Score"
        position:
          $ref: "#/components/schemas/Position"
        tokens:
          type: "array"
          items:
            $ref: "#/components/schemas/LinguisticToken"
    LinguisticToken:
      oneOf:
        - $ref: "#/components/schemas/TokenWord"
        - $ref: "#/components/schemas/TokenTrace"
        - $ref: "#/components/schemas/TokenWordTrace"
        - $ref: "#/components/schemas/TokenComposite"
      discriminator:
        propertyName: "type"
        mapping:
          WORD: "#/components/schemas/TokenWord"
          TRACE: "#/components/schemas/TokenTrace"
          WORD-TRACE: "#/components/schemas/TokenWordTrace"
          WORD-COMPOSITE: "#/components/schemas/TokenComposite"
    FormToken:
      type: "object"
      required:
        - "form"
        - "translitForm"
      properties:
        form:
          type: "string"
        translitForm:
          type: "string"
    TokenCompositeExt:
      type: "object"
      required:
        - "id"
        - "type"
        - "position"
        - "components"
      properties:
        id:
          type: "number"
          format: "int32"
          example: 0
        type:
          type: "string"
          enum:
            - "WORD-COMPOSITE"
        position:
          $ref: "#/components/schemas/Position"
        components:
          type: "array"
          items:
            $ref: "#/components/schemas/TokenWord"
    TokenComposite:
      allOf:
        - $ref: "#/components/schemas/FormToken"
        - $ref: "#/components/schemas/TokenCompositeExt"
    TokenSingle:
      type: "object"
      required:
        - "id"
        - "posBase"
        - "dependency"
        - "coReferences"
        - "semanticRelations"
        - "morphology"
        - "contextMorphology"
      properties:
        id:
          type: "number"
          format: "int32"
          example: 0
        posBase:
          $ref: "#/components/schemas/POSBase"
        dependency:
          type: "object"
          required:
            - "head"
            - "relation"
            - "attachmentScore"
            - "relationScore"
          properties:
            head:
              type: "number"
              format: "int32"
              example: "-1"
            relation:
              $ref: "#/components/schemas/SyntacticRelation"
            attachmentScore:
              $ref: "#/components/schemas/Score"
            relationScore:
              $ref: "#/components/schemas/Score"
        coReferences:
          type: "array"
          items:
            type: "object"
            required:
              - "sentenceId"
              - "tokenId"
              - "score"
            properties:
              sentenceId:
                type: "number"
                format: "int32"
                example: 1
              tokenId:
                type: "number"
                format: "int32"
                example: 5
              score:
                $ref: "#/components/schemas/Score"
        semanticRelations:
          type: "array"
          items:
            $ref: "#/components/schemas/SemanticRelation"
        morphology:
          type: "array"
          items:
            oneOf:
              - $ref: "#/components/schemas/Morphology"
              - $ref: "#/components/schemas/NumberMorphology"
        contextMorphology:
          type: "array"
          items:
            oneOf:
              - $ref: "#/components/schemas/Morphology"
              - $ref: "#/components/schemas/NumberMorphology"
    TokenWordExt:
      type: "object"
      required:
        - "type"
        - "position"
      properties:
        type:
          type: "string"
          enum:
            - "WORD"
        position:
          $ref: "#/components/schemas/Position"
    TokenWord:
      allOf:
        - $ref: "#/components/schemas/FormToken"
        - $ref: "#/components/schemas/TokenSingle"
        - $ref: "#/components/schemas/TokenWordExt"
    TokenTraceExt:
      type: "object"
      required:
        - "type"
      properties:
        type:
          type: "string"
          enum:
            - "TRACE"
    TokenTrace:
      allOf:
        - $ref: "#/components/schemas/TokenSingle"
        - $ref: "#/components/schemas/TokenTraceExt"
    TokenWordTraceExt:
      type: "object"
      required:
        - "type"
      properties:
        type:
          type: "string"
          enum:
            - "WORD-TRACE"
    TokenWordTrace:
      allOf:
        - $ref: "#/components/schemas/FormToken"
        - $ref: "#/components/schemas/TokenSingle"
        - $ref: "#/components/schemas/TokenWordTraceExt"
    LanguageObject:
      type: "object"
      required:
        - "id"
        - "name"
      properties:
        id:
          $ref: "#/components/schemas/LanguageISO"
        name:
          type: "string"
          description: "the standard English name"
          example: "English"
    LanguageISO:
      type: "string"
      example: "en"
      pattern: "^[a-z][a-z]$"
      description: "the ISO 639-1 code of the language (2 chars)"
    ScoredLanguage:
      allOf:
        - $ref: "#/components/schemas/LanguageObject"
        - $ref: "#/components/schemas/ScoredElement"
    LanguageExt:
      description: "the language in which the text has been written"
      properties:
        distribution:
          type: "array"
          description: "the distribution of the score among the languages"
          items:
            $ref: "#/components/schemas/ScoredLanguage"
    Language:
      allOf:
        - $ref: "#/components/schemas/LanguageObject"
        - $ref: "#/components/schemas/LanguageExt"
    Category:
      type: "object"
      description: "a category that indicates the content of the text"
      required:
        - "id"
        - "score"
        - "sentences"
        - "sublevel"
      properties:
        id:
          type: "string"
          example: "01000000"
        score:
          $ref: "#/components/schemas/Score"
        sentences:
          type: "array"
          items:
            type: "object"
            required:
              - "id"
              - "score"
              - "tokens"
            properties:
              id:
                type: "number"
                format: "int32"
                example: 0
              score:
                $ref: "#/components/schemas/Score"
              tokens:
                type: "array"
                items:
                  type: "object"
                  required:
                    - "id"
                    - "score"
                  properties:
                    id:
                      type: "number"
                      format: "int32"
                      example: 2
                    score:
                      $ref: "#/components/schemas/Score"
        sublevel:
          $ref: "#/components/schemas/SubCategory"
    SubCategoryExt:
      nullable: true
      description: "a nested category that can be null"
      example: null
    SubCategory:
      allOf:
        - $ref: "#/components/schemas/Category"
        - $ref: "#/components/schemas/SubCategoryExt"
    Location:
      type: "object"
      description: "a location recognized in the text"
      required:
        - "id"
        - "type"
        - "name"
        - "nameTranslations"
        - "sentences"
      properties:
        id:
          type: "string"
          example: "250A01D310045"
        type:
          type: "string"
          example: "City"
          enum:
            - "City"
            - "AdminArea"
            - "Country"
            - "Continent"
            - "Region"
        name:
          type: "string"
          example: "London"
        nameTranslations:
          type: "object"
          properties:
            ar:
              type: "string"
              example: "لندن"
            de:
              type: "string"
              example: "London"
            en:
              type: "string"
              example: "London"
            es:
              type: "string"
              example: "Londres"
            fr:
              type: "string"
              example: "Londres"
            it:
              type: "string"
              example: "Londra"
        sentences:
          type: "array"
          items:
            $ref: "#/components/schemas/Sentence"
    DateTime:
      oneOf:
        - $ref: "#/components/schemas/DateTimeSimple"
        - $ref: "#/components/schemas/Offset"
        - $ref: "#/components/schemas/Interval"
      discriminator:
        propertyName: "type"
        mapping:
          dateTime: "#/components/schemas/DateTimeSimple"
          offset: "#/components/schemas/Offset"
          interval: "#/components/schemas/Interval"
    DateTimeSimple:
      type: "object"
      description: "a specific date-time"
      required:
        - "type"
        - "sentences"
        - "isoFormat"
      properties:
        type:
          type: "string"
          enum:
            - "dateTime"
        sentences:
          type: "array"
          items:
            $ref: "#/components/schemas/Sentence"
        isoFormat:
          type: "string"
          description: "the date-time formatted in 'TZ' ISO format"
          format: "date-time"
          example: "2018-01-13T09:15:00Z"
    Offset:
      type: "object"
      description: "an offset of date or time"
      required:
        - "type"
        - "sentences"
        - "isoFormat"
        - "seconds"
      properties:
        type:
          type: "string"
          enum:
            - "offset"
        sentences:
          type: "array"
          items:
            $ref: "#/components/schemas/Sentence"
        isoFormat:
          type: "string"
          description: "the date-time formatted in 'TZ' ISO format"
          format: "date-time"
          example: "2018-01-13T09:15:00Z"
        seconds:
          type: "number"
          format: "int64"
    Interval:
      type: "object"
      description: "an interval of date-times (can be open)"
      required:
        - "type"
        - "sentences"
      properties:
        type:
          type: "string"
          enum:
            - "interval"
        sentences:
          type: "array"
          items:
            $ref: "#/components/schemas/Sentence"
        from:
          type: "string"
          description: "the lower bound of the interval (not present if it is open)"
          format: "date-time"
          example: "2018-01-13T09:15:00Z"
        to:
          type: "string"
          description: "the upper bound of the interval (not present if it is open)"
          format: "date-time"
          example: "2018-01-13T09:15:00Z"
    Entity:
      type: "object"
      description: "an entity recognized in the text"
      required:
        - "name"
        - "type"
        - "score"
        - "sentences"
      properties:
        name:
          type: "string"
          example: "Albert Einstein"
        type:
          type: "string"
          example: "PER"
          enum:
            - "PER"
            - "ORG"
        score:
          type: "number"
          format: "double"
          example: 0.78
        sentences:
          type: "array"
          items:
            $ref: "#/components/schemas/ScoredSentence"
    Sentence:
      type: "object"
      description: "a sentence with ranges of tokens that represent specific information"
      required:
        - "id"
        - "tokens"
      properties:
        id:
          type: "number"
          format: "int32"
          description: "the sentence id"
        tokens:
          type: "array"
          items:
            $ref: "#/components/schemas/TokensRange"
    ScoredSentence:
      type: "object"
      description: "a sentence with ranges of tokens that represent specific information, with the related system score"
      required:
        - "id"
        - "tokens"
      properties:
        id:
          type: "number"
          format: "int32"
          description: "the sentence id"
        tokens:
          type: "array"
          items:
            $ref: "#/components/schemas/ScoredTokensRange"
    TokensRange:
      type: "object"
      description: "a range of tokens that represent an information extracted from the text"
      required:
        - "startIndex"
        - "endIndex"
      properties:
        startIndex:
          type: "number"
          format: "int32"
          description: "the index of the first token of the range (within the 'tokens' list of the sentence)"
          example: 2
        endIndex:
          type: "number"
          format: "int32"
          description: "the index of the last token of the range (within the 'tokens' list of the sentence)"
          example: 4
    ScoredTokensRangeExt:
      type: "object"
      description: "a range of tokens that represent an information extracted from the text, with the related confidence of the system"
      required:
        - "score"
      properties:
        score:
          type: "number"
          format: "double"
          description: "the confidence of the system for this element"
    ScoredTokensRange:
      allOf:
        - $ref: "#/components/schemas/TokensRange"
        - $ref: "#/components/schemas/ScoredTokensRangeExt"
    Score:
      type: "number"
      format: "double"
      example: 0.89
    ScoredElement:
      required:
        - "score"
      properties:
        score:
          $ref: "#/components/schemas/Score"
    Position:
      type: "object"
      description: "the position in the text"
      required:
        - "index"
        - "start"
        - "end"
      properties:
        index:
          type: "number"
          format: "int32"
          example: 0
        start:
          type: "number"
          format: "int32"
          example: 0
        end:
          type: "number"
          format: "int32"
          example: 8
    Morphology:
      type: "object"
      required:
        - "oov"
        - "lemma"
        - "pos"
        - "score"
      properties:
        oov:
          type: "boolean"
          description: "whether this morphology is Out Of Vocabulary because it has been generated respect to the context"
        lemma:
          type: "string"
        pos:
          $ref: "#/components/schemas/POS"
        score:
          $ref: "#/components/schemas/Score"
        gender:
          $ref: "#/components/schemas/Gender"
        number:
          $ref: "#/components/schemas/Number"
        person:
          $ref: "#/components/schemas/Person"
        mood:
          $ref: "#/components/schemas/Mood"
        tense:
          $ref: "#/components/schemas/Tense"
        case:
          $ref: "#/components/schemas/Case"
        degree:
          $ref: "#/components/schemas/Degree"
        voice:
          $ref: "#/components/schemas/Voice"
    NumberMorphologyExt:
      type: "object"
      required:
        - "lemma"
        - "pos"
        - "numericalForm"
      properties:
        lemma:
          type: "string"
          example: "123.5"
        pos:
          type: "string"
          enum:
            - "Number"
        numericalForm:
          type: "number"
          description: "the number expressed in digits"
          example: 123.5
    NumberMorphology:
      allOf:
        - $ref: "#/components/schemas/Morphology"
        - $ref: "#/components/schemas/NumberMorphologyExt"
    POSBase:
      type: "string"
      enum:
        - "ADJ"
        - "ADV"
        - "ART"
        - "CONJ"
        - "NOUN"
        - "PRON"
        - "PREP"
        - "POSTPOS"
        - "INTERJ"
        - "PHRASE"
        - "PUNCT"
        - "VERB"
        - "DATE"
        - "HOUR"
        - "NUM"
        - "PREDET"
        - "UNKNOWN"
    POSExt:
      type: "string"
      enum:
        - "ADJ-COMPAR"
        - "ADJ-DEITT"
        - "ADJ-DEMONS"
        - "ADJ-DEMONS-ANTEC"
        - "ADJ-DEMONS-SUCC"
        - "ADJ-EXCLAM"
        - "ADJ-INDEF"
        - "ADJ-INDEF-SUBORD"
        - "ADJ-INDEF-DISTR"
        - "ADJ-INDEF-QUANT"
        - "ADJ-INTERR"
        - "ADJ-POSS"
        - "ADJ-ORDIN"
        - "ADJ-QUALIF"
        - "ADJ-QUALIF-POST"
        - "ADJ-RELAT"
        - "ADV-ADVERS"
        - "ADV-COMPAR"
        - "ADV-CONCESS"
        - "ADV-DEITT"
        - "ADV-INDEF"
        - "ADV-INDEF-SUBORD"
        - "ADV-INTERR"
        - "ADV-LIMIT"
        - "ADV-LOC"
        - "ADV-NEG"
        - "ADV-PHRAS"
        - "ADV-QUANT"
        - "ADV-STRENG"
        - "ADV-STRENG-NEG"
        - "ADV-TIME"
        - "ART-DEF"
        - "ART-INDEF"
        - "ART-INDEF-PART"
        - "CONJ-COMPAR"
        - "CONJ-COMPAR-ANTEC"
        - "CONJ-COMPAR-SUCC"
        - "CONJ-CONCESS"
        - "CONJ-COORD"
        - "CONJ-COORD-ADVERS"
        - "CONJ-COORD-DISJ"
        - "CONJ-COORD-EXPLIC"
        - "CONJ-COORD-NEG"
        - "CONJ-CORREL"
        - "CONJ-CORREL-ANTEC"
        - "CONJ-CORREL-SUCC"
        - "CONJ-SUBORD"
        - "CONJ-SUBORD-ADVERS"
        - "CONJ-SUBORD-INTERR"
        - "NOUN-COMMON"
        - "NOUN-COMMON-GERUND"
        - "NOUN-COMMON-QUANT"
        - "NOUN-PROPER"
        - "NOUN-PROPER-LOC"
        - "NOUN-PROPER-ORG"
        - "NOUN-PROPER-PER"
        - "PRON-DEMONS"
        - "PRON-EXCLAM"
        - "PRON-INDEF"
        - "PRON-INDEF-DISTR"
        - "PRON-INDEF-QUANT"
        - "PRON-INDEF-SUBORD"
        - "PRON-INTERR"
        - "PRON-ORDIN"
        - "PRON-PERS"
        - "PRON-PERS-ENCLIT"
        - "PRON-PERS-PROCLIT"
        - "PRON-PERS-PROCLIT-REFL"
        - "PRON-PERS-PROCLIT-VARIANT"
        - "PRON-PERS-REFL"
        - "PRON-PERS-VARIANT"
        - "PRON-POSS"
        - "PRON-RELAT"
        - "PRON-RELAT-DOUBLE"
        - "PREP-ART"
        - "PREP-POSS"
        - "PREP-COMPAR"
        - "POSTPOS-POSS"
        - "PHRASE-EXCLAM"
        - "PHRASE-INTERR"
        - "PHRASE-NEG"
        - "VERB-MODAL"
        - "VERB-AUX"
    POS:
      allOf:
        - $ref: "#/components/schemas/POSBase"
        - $ref: "#/components/schemas/POSExt"
    SyntacticRelation:
      type: "string"
      enum:
        - "TOP"
        - "INITIATOR"
        - "SUBJ"
        - "SUBJ-INTERR"
        - "SUBJ-PASS"
        - "OBJ"
        - "OBJ-INTERR"
        - "IOBJ"
        - "IOBJ-INTERR"
        - "INDCOMPL"
        - "PREDCOMPL"
        - "PREDCOMPL-SUBJ"
        - "PREDCOMPL-OBJ"
        - "PREDCOMPL-SUBJ-INTERR"
        - "PREDCOMPL-OBJ-INTERR"
        - "PREDCOMPL-INTERR"
        - "RMOD"
        - "RMOD-EXCLAM"
        - "RMOD-INTERR"
        - "RMOD-NEG"
        - "RMOD-POSS"
        - "RMOD-COMPAR"
        - "RMOD-QUANT"
        - "RMOD2ND"
        - "RMOD2ND-NEG"
        - "EXTRAOBJ"
        - "EXTRASUBJ"
        - "EMPTYCOMPL"
        - "LOC"
        - "PART"
        - "VOC"
        - "DET"
        - "APPOSITION"
        - "RELCL"
        - "RELCL-REDUC"
        - "AUX"
        - "AUX-TENSE"
        - "AUX-PASSIVE"
        - "AUX-PROGRESSIVE"
        - "COORD"
        - "COORD-ANTEC"
        - "COORD-NEG"
        - "COORD2ND"
        - "COORD2ND-NEG"
        - "COORD2ND-ADVERS"
        - "COORD2ND-COMPAR"
        - "COORD2ND-CORRELAT"
        - "COORD2ND-EXPLIC"
        - "COORD2ND-SYMMETRIC"
        - "SEPARATOR"
        - "SEPARATOR-OPEN"
        - "SEPARATOR-CLOSE"
        - "QUOTES"
        - "QUOTES-OPEN"
        - "QUOTES-CLOSE"
        - "CONN"
        - "CONTIN"
        - "CONTIN-DENOM"
        - "CONTIN-LOCUT"
        - "CONTIN-NUM"
        - "CONTIN-COORD"
        - "END"
        - "END-INTERROGATIVE"
        - "END-ASSERTIVE"
        - "END-IMPERATIVE"
        - "INTERJ"
        - "_"
        - "UNKNOWN"
        - "WRONG"
    SemanticRelation:
      type: "string"
      enum:
        - "SPACETIME"
        - "SPACETIME-INTERVAL"
        - "SPACETIME-START"
        - "SPACETIME-END"
        - "TEMP"
        - "TEMP-START"
        - "TEMP-END"
        - "TEMP-PREV"
        - "TEMP-POST"
        - "TEMP-PROXIM"
        - "LOC"
        - "LOC-IN"
        - "LOC-DEST"
        - "LOC-DIST"
        - "LOC-UP"
        - "LOC-DOWN"
        - "LOC-AROUND"
        - "LOC-SOURCE"
        - "LOC-PROXIM"
        - "LOC-CONTACT"
        - "LOC-SIDE"
        - "LOC-SIDE-RIGHT"
        - "LOC-SIDE-LEFT"
        - "MOV"
        - "MOV-IN"
        - "MOV-FROM"
        - "MOV-TO"
        - "MOV-TROUGH"
        - "COMPAR"
        - "COMPAR-LIMIT"
        - "COMPAR-ACC"
        - "COMPAR-EQUAL"
        - "COMPAR-EQUAL-NEG"
        - "MANNER"
        - "MANNER-EQUAL"
        - "MANNER-UNEQUAL"
        - "MODAL"
        - "COND"
        - "CONC"
        - "CAUS"
        - "REASON"
        - "REASONCAUSE"
        - "ADVERS"
        - "LIMIT"
        - "GOAL"
        - "EXCEPT"
        - "EXPLIC"
        - "THEME"
        - "PROGRESS"
        - "UNION"
        - "DISUNION"
        - "CONCERNS"
        - "PARTITIVE"
        - "SPEC"
        - "SPEC-DENOM"
        - "COMPANIONSHIP"
        - "COMPANIONSHIP-FIG"
        - "BENEFICIARY"
        - "BENEFICIARY-DIS"
        - "MEANS"
        - "INSTRUMENT"
        - "MATERIAL"
        - "FAULT"
        - "PENALTY"
        - "REPLACEMENT"
    Gender:
      type: "string"
      enum:
        - "_"
        - "M"
        - "F"
        - "N"
    Number:
      type: "string"
      enum:
        - "_"
        - "SING"
        - "PL"
        - "DUAL"
    Person:
      type: "string"
      enum:
        - "_"
        - "1"
        - "2"
        - "3"
    Mood:
      type: "string"
      enum:
        - "BASE"
        - "IND"
        - "COND"
        - "SUBJ"
        - "PART"
        - "GERUND"
        - "INF"
        - "IMPER"
    Tense:
      type: "string"
      enum:
        - "BASE"
        - "PRESENT"
        - "IMPERFECT"
        - "PAST"
        - "FUTURE"
    Case:
      type: "string"
      enum:
        - "_"
        - "UNKNOWN"
        - "SUBJ"
        - "OBJ"
        - "IOBJ"
        - "VOC"
        - "PART"
        - "LOC"
        - "NEUT"
        - "EMPTY"
    Degree:
      type: "string"
      enum:
        - "BASE"
        - "POS"
        - "SUPER"
        - "COMPAR"
        - "DIM"
        - "AUG"
        - "END"
        - "PEJ"
    Voice:
      type: "string"
      enum:
        - "_"
        - "ACTIVE"
        - "PASSIVE"
